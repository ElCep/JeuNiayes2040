results <- list()
# DataFrame pour stocker les résultats
results_df <- data.frame()
# Simulation pour chaque combinaison de r et q
for (r in r_values) {
for (q in q_values) {
for (n in n_value){
parameters <- c(r = r, k = 100000, q = q, a = 0.8, n = n_value,
alpha = 1500000, lambda = 542025, gamma = 0.002)
out <- ode(y = initial_state, times = times, func = model, parms = parameters)
simulated_data <- as.data.frame(out)
# Vérifier si B tombe à zéro
if (all(simulated_data$B > 1000)) {
results[[paste("r=", r, "q=", q, "n=",n)]] <- simulated_data
results_df <- rbind(results_df, c(r, q, n, simulated_data$B[101]))
}
}
}
}
View(results_df)
colnames(results_df) <- c("r","q","n")
colnames(results_df) <- c("r","q","n","biomass")
results_df <- results_df[order(-results_df$biomass), ]
results_df[order(-results_df$biomass), ]
View(results_df)
#install.packages('~/Téléchargements/rSMILE_2.0.10_R_x86_64-pc-linux-gnu.tar.gz', repos = NULL)
# install.packages('stringr')
library('stringr')
library('rSMILE')
library('ggtern')
install.packages(c("askpass", "bayesm", "BH", "bookdown", "brew", "brio", "broom", "bslib", "classInt", "cli", "commonmark", "compositions", "cpp11", "credentials", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "DEoptimR", "desc", "DescTools", "digest", "downlit", "dplyr", "dqrng", "e1071", "evaluate", "expm", "fansi", "fontawesome", "fs", "gargle", "gert", "ggplot2", "glmnet", "glue", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "igraph", "interp", "jsonlite", "kableExtra", "KernSmooth", "knitr", "labeling", "later", "lifecycle", "lubridate", "maps", "markdown", "MASS", "melt", "mvtnorm", "openssl", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "prettyunits", "processx", "progress", "proj4", "promises", "ps", "purrr", "ragg", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "rematch", "remotes", "reprex", "reticulate", "RJSONIO", "rlang", "rmarkdown", "robustbase", "roxygen2", "rprojroot", "rstudioapi", "s2", "sass", "scales", "servr", "sf", "shiny", "sp", "stringi", "stringr", "svglite", "systemfonts", "tensorA", "terra", "testthat", "textshaping", "tidyr", "timechange", "tinytex", "tzdb", "units", "usethis", "utf8", "uuid", "V8", "vctrs", "vroom", "waldo", "webshot", "withr", "wk", "xfun", "XML", "xml2", "yaml", "zip"))
install.packages(c("askpass", "bayesm", "BH", "bookdown", "brew", "brio", "broom", "bslib", "classInt", "cli", "commonmark", "compositions", "cpp11", "credentials", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "DEoptimR", "desc", "DescTools", "digest", "downlit", "dplyr", "dqrng", "e1071", "evaluate", "expm", "fansi", "fontawesome", "fs", "gargle", "gert", "ggplot2", "glmnet", "glue", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "igraph", "interp", "jsonlite", "kableExtra", "KernSmooth", "knitr", "labeling", "later", "lifecycle", "lubridate", "maps", "markdown", "MASS", "melt", "mvtnorm", "openssl", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "prettyunits", "processx", "progress", "proj4", "promises", "ps", "purrr", "ragg", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "rematch", "remotes", "reprex", "reticulate", "RJSONIO", "rlang", "rmarkdown", "robustbase", "roxygen2", "rprojroot", "rstudioapi", "s2", "sass", "scales", "servr", "sf", "shiny", "sp", "stringi", "stringr", "svglite", "systemfonts", "tensorA", "terra", "testthat", "textshaping", "tidyr", "timechange", "tinytex", "tzdb", "units", "usethis", "utf8", "uuid", "V8", "vctrs", "vroom", "waldo", "webshot", "withr", "wk", "xfun", "XML", "xml2", "yaml", "zip"))
install.packages(c("askpass", "bayesm", "BH", "bookdown", "brew", "brio", "broom", "bslib", "classInt", "cli", "commonmark", "compositions", "cpp11", "credentials", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "DEoptimR", "desc", "DescTools", "digest", "downlit", "dplyr", "dqrng", "e1071", "evaluate", "expm", "fansi", "fontawesome", "fs", "gargle", "gert", "ggplot2", "glmnet", "glue", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "igraph", "interp", "jsonlite", "kableExtra", "KernSmooth", "knitr", "labeling", "later", "lifecycle", "lubridate", "maps", "markdown", "MASS", "melt", "mvtnorm", "openssl", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "prettyunits", "processx", "progress", "proj4", "promises", "ps", "purrr", "ragg", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "rematch", "remotes", "reprex", "reticulate", "RJSONIO", "rlang", "rmarkdown", "robustbase", "roxygen2", "rprojroot", "rstudioapi", "s2", "sass", "scales", "servr", "sf", "shiny", "sp", "stringi", "stringr", "svglite", "systemfonts", "tensorA", "terra", "testthat", "textshaping", "tidyr", "timechange", "tinytex", "tzdb", "units", "usethis", "utf8", "uuid", "V8", "vctrs", "vroom", "waldo", "webshot", "withr", "wk", "xfun", "XML", "xml2", "yaml", "zip"))
install.packages(c("askpass", "bayesm", "BH", "bookdown", "brew", "brio", "broom", "bslib", "classInt", "cli", "commonmark", "compositions", "cpp11", "credentials", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "DEoptimR", "desc", "DescTools", "digest", "downlit", "dplyr", "dqrng", "e1071", "evaluate", "expm", "fansi", "fontawesome", "fs", "gargle", "gert", "ggplot2", "glmnet", "glue", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "igraph", "interp", "jsonlite", "kableExtra", "KernSmooth", "knitr", "labeling", "later", "lifecycle", "lubridate", "maps", "markdown", "MASS", "melt", "mvtnorm", "openssl", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "prettyunits", "processx", "progress", "proj4", "promises", "ps", "purrr", "ragg", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "rematch", "remotes", "reprex", "reticulate", "RJSONIO", "rlang", "rmarkdown", "robustbase", "roxygen2", "rprojroot", "rstudioapi", "s2", "sass", "scales", "servr", "sf", "shiny", "sp", "stringi", "stringr", "svglite", "systemfonts", "tensorA", "terra", "testthat", "textshaping", "tidyr", "timechange", "tinytex", "tzdb", "units", "usethis", "utf8", "uuid", "V8", "vctrs", "vroom", "waldo", "webshot", "withr", "wk", "xfun", "XML", "xml2", "yaml", "zip"))
install.packages(c("askpass", "bayesm", "BH", "bookdown", "brew", "brio", "broom", "bslib", "classInt", "cli", "commonmark", "compositions", "cpp11", "credentials", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "DEoptimR", "desc", "DescTools", "digest", "downlit", "dplyr", "dqrng", "e1071", "evaluate", "expm", "fansi", "fontawesome", "fs", "gargle", "gert", "ggplot2", "glmnet", "glue", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "igraph", "interp", "jsonlite", "kableExtra", "KernSmooth", "knitr", "labeling", "later", "lifecycle", "lubridate", "maps", "markdown", "MASS", "melt", "mvtnorm", "openssl", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "prettyunits", "processx", "progress", "proj4", "promises", "ps", "purrr", "ragg", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "rematch", "remotes", "reprex", "reticulate", "RJSONIO", "rlang", "rmarkdown", "robustbase", "roxygen2", "rprojroot", "rstudioapi", "s2", "sass", "scales", "servr", "sf", "shiny", "sp", "stringi", "stringr", "svglite", "systemfonts", "tensorA", "terra", "testthat", "textshaping", "tidyr", "timechange", "tinytex", "tzdb", "units", "usethis", "utf8", "uuid", "V8", "vctrs", "vroom", "waldo", "webshot", "withr", "wk", "xfun", "XML", "xml2", "yaml", "zip"))
rm(list = ls())
library(jsonlite)
library(reshape2)
library(ggplot2)
library(DescTools)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data <- NULL
file.l <- c("../data/result_pluies20-6.json", "../data/result_pluies6-20.json", "../data/result_pluies0-26.json")
for(i in 1:length(file.l)){
tmp <- fromJSON(file.l[i])
data <- c(data, tmp)
}
View(data)
dim(data$data$variables$result[[1]])
data1 <- fromJSON("../data/result_pluies20-6.json")
dim(data1$data$variables$result[[1]])
data <- NULL
file.l <- c("../data/result_pluies20-6.json", "../data/result_pluies6-20.json", "../data/result_pluies0-26.json")
for(i in 1:length(file.l)){
tmp <- fromJSON(file.l[i])
data <- Map(c,data,tmp)
}
i=1
data <- fromJSON(file.l[i])
dim(data$data$variables$result[[1]])
# 100000  4 13  donc 100000 réplication, 4 joueur et 13 variables. Donc une partie est une ligne.
tps1 <- unlist(data$data$variables$pluie1)
tps2 <- unlist(data$data$variables$pluie2)
tps <- as.data.frame(cbind(tps1, tps2))
tps$sum_recharge <- apply(tps, 1, sum) # Calculer la médiane de chaque ligne
## organisation des données par PARTIES ####
# Étape 1 : Extraction des données
results <- data$data$variables$result
p.capital <- as.data.frame(results[[1]][,,2])
p.capital$pluies <- tps$sum_recharge
p.capital.melt <- melt(p.capital, id.vars = "pluies")
colnames(p.capital.melt) <- c('pluie','player','capital')
# Étape 1 : Extraction des données
p.prelev <- as.data.frame(results[[1]][,,3])
# Étape 2 : Transformation en format long
# Crée un data frame 'p.prelev' avec deux colonnes : 'player2' et 'prelevement'
p.prelev.melt <- melt(p.prelev)
colnames(p.prelev.melt) <- c('player2','prelevement')
# Renommez les levels
levels(p.capital.melt$player) <- c("p1", "p2", "p3","p4")
# On va normaliser la colonne capitale entre 0 et 1 pour avoir des valeurs comparable
p.capital.melt$capitalNorm <- apply(p.capital.melt[, "capital", drop = FALSE], 2, function(x) {
(x - min(x)) / (max(x) - min(x))
})
colnames(p.capital.melt)[4] <- "capitalNorm"
min_val <- min(p.prelev.melt$prelevement)
max_val <- max(p.prelev.melt$prelevement)
p.prelev.melt$prelevNorm <- (p.prelev.melt$prelevement - min_val) / (p.prelev.melt$prelevement - min_val)
df.p <- data.frame(p.capital.melt[,1:4], p.prelev.melt[,2:3])
View(df.p)
p.capital.melt
colnames(p.capital.melt)[4] <- "capitalNorm"
View(p.capital.melt)
colnames(p.capital.melt) <- c("pluie", "player", "capital", "capitalNorm")
View(p.capital.melt)
names(p.capital.melt) <- c("pluie", "player", "capital", "capitalNorm")
View(p.capital.melt)
names(p.capital.melt)
df.p <- data.frame(p.capital.melt[,1:4], p.prelev.melt[,2:3])
View(df.p)
df.p$partie <- i
View(df.p)
df.meltd <- data.frame()
file.l <- c("../data/result_pluies20-6.json", "../data/result_pluies6-20.json", "../data/result_pluies0-26.json")
for(i in 1:length(file.l)){
data <- fromJSON(file.l[i])
dim(data$data$variables$result[[1]])
# 100000  4 13  donc 100000 réplication, 4 joueur et 13 variables. Donc une partie est une ligne.
tps1 <- unlist(data$data$variables$pluie1)
tps2 <- unlist(data$data$variables$pluie2)
tps <- as.data.frame(cbind(tps1, tps2))
tps$sum_recharge <- apply(tps, 1, sum) # Calculer la médiane de chaque ligne
## organisation des données par PARTIES ####
# Étape 1 : Extraction des données
results <- data$data$variables$result
p.capital <- as.data.frame(results[[1]][,,2])
p.capital$pluies <- tps$sum_recharge
p.capital.melt <- melt(p.capital, id.vars = "pluies")
colnames(p.capital.melt) <- c('pluie','player','capital')
# Étape 1 : Extraction des données
p.prelev <- as.data.frame(results[[1]][,,3])
# Étape 2 : Transformation en format long
# Crée un data frame 'p.prelev' avec deux colonnes : 'player2' et 'prelevement'
p.prelev.melt <- melt(p.prelev)
colnames(p.prelev.melt) <- c('player2','prelevement')
## organisation des données par JOUEURS ####
# Renommez les levels
levels(p.capital.melt$player) <- c("p1", "p2", "p3","p4")
# On va normaliser la colonne capitale entre 0 et 1 pour avoir des valeurs comparable
p.capital.melt$capitalNorm <- apply(p.capital.melt[, "capital", drop = FALSE], 2, function(x) {
(x - min(x)) / (max(x) - min(x))
})
names(p.capital.melt) <- c("pluie", "player", "capital", "capitalNorm")
min_val <- min(p.prelev.melt$prelevement)
max_val <- max(p.prelev.melt$prelevement)
p.prelev.melt$prelevNorm <- (p.prelev.melt$prelevement - min_val) / (p.prelev.melt$prelevement - min_val)
df.p <- data.frame(p.capital.melt[,1:4], p.prelev.melt[,2:3])
df.p$partie <- i
df.meltd <- rbind(df.meltd, df.p)
}
View(df.meltd)
names(df.meltd)
data.p.meltd <- melt(data = subset(df.meltd, select = c("pluie", "player", "partie", "capital", "prelevement")), id.vars = c("pluie", "player", "partie") )
ggplot(data = data.p.meltd)+
geom_point(aes(x = capital, y = prelevement, colour = "partie"), size = 0.5)+
# geom_hline(yintercept=0.75, linetype="dashed", color = "grey")+
# geom_vline(xintercept=0.75, linetype="dashed", color = "grey")+
theme_bw()+
labs(x = "final capital normalized", y= "water withdrawal normalized",
title = "80 replication pluie 0-26", subtitle = "By players with a variation on underground water recharge" )+
xlim(c(0,150))+
ylim(c(0,150))
ggplot(data = data.p.meltd)+
geom_point(aes(x = capital, y = prelevement, colour = partie), size = 0.5)+
# geom_hline(yintercept=0.75, linetype="dashed", color = "grey")+
# geom_vline(xintercept=0.75, linetype="dashed", color = "grey")+
theme_bw()+
labs(x = "final capital normalized", y= "water withdrawal normalized",
title = "80 replication pluie 0-26", subtitle = "By players with a variation on underground water recharge" )+
xlim(c(0,150))+
ylim(c(0,150))
View(data.p.meltd)
ggplot(data = df.meltd)+
geom_point(aes(x = capital, y = prelevement, colour = partie), size = 0.5)+
# geom_hline(yintercept=0.75, linetype="dashed", color = "grey")+
# geom_vline(xintercept=0.75, linetype="dashed", color = "grey")+
theme_bw()+
labs(x = "final capital normalized", y= "water withdrawal normalized",
title = "80 replication pluie 0-26", subtitle = "By players with a variation on underground water recharge" )+
xlim(c(0,150))+
ylim(c(0,150))
ggplot(data = df.meltd)+
geom_point(aes(x = capital, y = prelevement, colour = as.factor(partie)), size = 0.5)+
# geom_hline(yintercept=0.75, linetype="dashed", color = "grey")+
# geom_vline(xintercept=0.75, linetype="dashed", color = "grey")+
theme_bw()+
labs(x = "final capital normalized", y= "water withdrawal normalized",
title = "80 replication pluie 0-26", subtitle = "By players with a variation on underground water recharge" )+
xlim(c(0,150))+
ylim(c(0,150))
ggplot(data = df.meltd)+
geom_point(aes(x = capital, y = prelevement, colour = as.factor(partie)), size = 0.5)+
# geom_hline(yintercept=0.75, linetype="dashed", color = "grey")+
# geom_vline(xintercept=0.75, linetype="dashed", color = "grey")+
theme_bw()+
labs(x = "final capital normalized", y= "water withdrawal normalized",
title = "80 replication pluie 0-26 , 20-6, 6-20", subtitle = "By players with a variation on underground water recharge" )+
xlim(c(0,150))+
ylim(c(0,150))
file.l
ggplot(data = df.meltd)+
geom_point(aes(x = capital, y = prelevement, colour = as.factor(partie)), size = 0.5)+
# geom_hline(yintercept=0.75, linetype="dashed", color = "grey")+
# geom_vline(xintercept=0.75, linetype="dashed", color = "grey")+
theme_bw()+
labs(x = "final capital normalized", y= "water withdrawal normalized",
title = "80 replication pluie 0-26 , 20-6, 6-20", subtitle = "By players with a variation on underground water recharge" )+
xlim(c(0,150))+
ylim(c(0,150))+
scale_colour_manual(values = c('1' = "blue", '2' = "red", '3'= 'black'),
labels = c("20-6", "6-20", "0-26"))
ggplot(data = df.meltd)+
geom_point(aes(x = capital, y = prelevement, colour = as.factor(partie)), size = 0.5)+
# geom_hline(yintercept=0.75, linetype="dashed", color = "grey")+
# geom_vline(xintercept=0.75, linetype="dashed", color = "grey")+
theme_bw()+
labs(x = "final capital normalized", y= "water withdrawal normalized",
title = "80 replication pluie 0-26 , 20-6, 6-20",
subtitle = "By players with a variation on underground water recharge",
colour = "rainfall pattern")+
xlim(c(0,150))+
ylim(c(0,150))+
scale_colour_manual(values = c('1' = "blue", '2' = "red", '3'= 'black'),
labels = c("20-6", "6-20", "0-26"))
ggplot(data = df.meltd)+
geom_point(aes(x = capital, y = prelevement, colour = as.factor(partie)), size = 0.5)+
# geom_hline(yintercept=0.75, linetype="dashed", color = "grey")+
# geom_vline(xintercept=0.75, linetype="dashed", color = "grey")+
theme_bw()+
labs(x = "final capital normalized", y= "water withdrawal normalized",
title = "80 replication pluie 0-26 , 20-6, 6-20",
subtitle = "By players with a variation on underground water recharge",
colour = "rainfall pattern")+
xlim(c(0,150))+
ylim(c(0,150))+
scale_colour_manual(values = c('1' = "#a6cee3", '2' = "#1f78b4", '3'= '#b2df8a'),
labels = c("20-6", "6-20", "0-26"))
ggplot(data = df.meltd)+
geom_point(aes(x = capital, y = prelevement, colour = as.factor(partie)), size = 0.5)+
# geom_hline(yintercept=0.75, linetype="dashed", color = "grey")+
# geom_vline(xintercept=0.75, linetype="dashed", color = "grey")+
theme_bw()+
labs(x = "final capital normalized", y= "water withdrawal normalized",
title = "80 replication pluie 0-26 , 20-6, 6-20",
subtitle = "By players with a variation on underground water recharge",
colour = "rainfall\npattern")+
xlim(c(0,150))+
ylim(c(0,150))+
scale_colour_manual(values = c('1' = "#a6cee3", '2' = "#1f78b4", '3'= '#b2df8a'),
labels = c("20-6", "6-20", "0-26"))
ggplot(data = df.meltd)+
geom_point(aes(x = capital, y = prelevement, colour = as.factor(partie)), size = 0.5)+
# geom_hline(yintercept=0.75, linetype="dashed", color = "grey")+
# geom_vline(xintercept=0.75, linetype="dashed", color = "grey")+
theme_bw()+
labs(x = "final capital normalized", y= "water withdrawal normalized",
title = "80 replication with diff. rainfall pattern",
subtitle = "By players with a variation on underground water recharge",
colour = "Rainfall\nPattern")+
xlim(c(0,150))+
ylim(c(0,150))+
scale_colour_manual(values = c('1' = "#a6cee3", '2' = "#1f78b4", '3'= '#b2df8a'),
labels = c("20-6", "6-20", "0-26"))
ggsave(filename = "../img/capital_water_players_pluie.png", width = 11)
View(data.p.meltd)
View(data.p.meltd)
ggplot(data = data.p.meltd)+
geom_boxplot(aes(x = variable, y = value))+
facet_wrap(~partie)
ggplot(data = data.p.meltd)+
geom_boxplot(aes(x = variable, y = value))+
facet_wrap(~partie)+
theme_bw()
ggplot(data = data.p.meltd)+
geom_boxplot(aes(x = variable, y = value))+
facet_wrap(~partie, labeller = as_labeller(labels_map))+
theme_bw()
labels_map <- setNames(c("20-6", "6-20", "0-26"), c("1", "2","3"))
ggplot(data = data.p.meltd)+
geom_boxplot(aes(x = variable, y = value))+
facet_wrap(~partie, labeller = as_labeller(labels_map))+
theme_bw()
ggplot(data = data.p.meltd)+
geom_boxplot(aes(x = variable, y = value))+
facet_wrap(~partie, labeller = as_labeller(labels_map))+
theme_bw()+
labs(x = "", y= "",
title = "80 replication with diff. rainfall pattern",
subtitle = "By players with a variation on underground water recharge")
ggsave(filename = "../img/capital_water_players_pluie_boxplot.png", width = 11)
library("dplyr")
library("ggplot2")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read.csv("../data/result_replication_100k.csv")
saveRDS(df, file = "result_replication_100k.Rdata")
saveRDS(df, file = "../data/result_replication_100k.Rdata")
library("dplyr")
library("ggplot2")
rm(list = ls())
library(jsonlite)
library(reshape2)
library(ggplot2)
library(DescTools)
# Lire le fichier JSON issue du script OpenMole replication.oms
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df.meltd <- data.frame()
file.l <- c("../data/result_pluies20-6.json", "../data/result_pluies6-20.json", "../data/result_pluies0-26.json")
for(i in 1:length(file.l)){
data <- fromJSON(file.l[i])
dim(data$data$variables$result[[1]])
# 100000  4 13  donc 100000 réplication, 4 joueur et 13 variables. Donc une partie est une ligne.
tps1 <- unlist(data$data$variables$pluie1)
tps2 <- unlist(data$data$variables$pluie2)
tps <- as.data.frame(cbind(tps1, tps2))
tps$sum_recharge <- apply(tps, 1, sum) # Calculer la médiane de chaque ligne
## organisation des données par PARTIES ####
# Étape 1 : Extraction des données
results <- data$data$variables$result
p.capital <- as.data.frame(results[[1]][,,2])
p.capital$pluies <- tps$sum_recharge
p.capital.melt <- melt(p.capital, id.vars = "pluies")
colnames(p.capital.melt) <- c('pluie','player','capital')
# Étape 1 : Extraction des données
p.prelev <- as.data.frame(results[[1]][,,3])
# Étape 2 : Transformation en format long
# Crée un data frame 'p.prelev' avec deux colonnes : 'player2' et 'prelevement'
p.prelev.melt <- melt(p.prelev)
colnames(p.prelev.melt) <- c('player2','prelevement')
## organisation des données par JOUEURS ####
# Renommez les levels
levels(p.capital.melt$player) <- c("p1", "p2", "p3","p4")
# On va normaliser la colonne capitale entre 0 et 1 pour avoir des valeurs comparable
p.capital.melt$capitalNorm <- apply(p.capital.melt[, "capital", drop = FALSE], 2, function(x) {
(x - min(x)) / (max(x) - min(x))
})
names(p.capital.melt) <- c("pluie", "player", "capital", "capitalNorm")
min_val <- min(p.prelev.melt$prelevement)
max_val <- max(p.prelev.melt$prelevement)
p.prelev.melt$prelevNorm <- (p.prelev.melt$prelevement - min_val) / (p.prelev.melt$prelevement - min_val)
df.p <- data.frame(p.capital.melt[,1:4], p.prelev.melt[,2:3])
df.p$partie <- i
df.meltd <- rbind(df.meltd, df.p)
}
data.p.meltd <- melt(data = subset(df.meltd,
select = c("pluie", "player", "partie", "capital", "prelevement")
),
id.vars = c("pluie", "player", "partie") )
## Visualisation ggplot par JOUEURS ####
ggplot(data = df.meltd)+
geom_point(aes(x = capital, y = prelevement, colour = as.factor(partie)), size = 0.5)+
# geom_hline(yintercept=0.75, linetype="dashed", color = "grey")+
# geom_vline(xintercept=0.75, linetype="dashed", color = "grey")+
theme_bw()+
labs(x = "final capital", y= "water withdrawal",
title = "80 replication with diff. rainfall pattern",
subtitle = "By players with a variation on underground water recharge",
colour = "Rainfall\nPattern")+
xlim(c(0,150))+
ylim(c(0,150))+
scale_colour_manual(values = c('1' = "#a6cee3", '2' = "#1f78b4", '3'= '#b2df8a'),
labels = c("20-6", "6-20", "0-26"))
ggsave(filename = "../img/capital_water_players_pluie.png", width = 11)
labels_map <- setNames(c("20-6", "6-20", "0-26"), c("1", "2","3"))
ggplot(data = data.p.meltd)+
geom_boxplot(aes(x = variable, y = value))+
facet_wrap(~partie, labeller = as_labeller(labels_map))+
theme_bw()+
labs(x = "", y= "",
title = "80 replication with diff. rainfall pattern",
subtitle = "By players with a variation on underground water recharge")
ggplot(data = df.meltd)+
geom_point(aes(x = capital, y = prelevement, colour = as.factor(partie)), size = 0.5)+
# geom_hline(yintercept=0.75, linetype="dashed", color = "grey")+
# geom_vline(xintercept=0.75, linetype="dashed", color = "grey")+
theme_bw()+
labs(x = "final capital", y= "water withdrawal",
title = "300 replication with diff. rainfall pattern",
subtitle = "By players with a variation on underground water recharge",
colour = "Rainfall\nPattern")+
xlim(c(0,150))+
ylim(c(0,150))+
scale_colour_manual(values = c('1' = "#a6cee3", '2' = "#1f78b4", '3'= '#b2df8a'),
labels = c("20-6", "6-20", "0-26"))
ggsave(filename = "../img/capital_water_players_pluie.png", width = 11)
labels_map <- setNames(c("20-6", "6-20", "0-26"), c("1", "2","3"))
ggplot(data = data.p.meltd)+
geom_boxplot(aes(x = variable, y = value))+
facet_wrap(~partie, labeller = as_labeller(labels_map))+
theme_bw()+
labs(x = "", y= "",
title = "300 replication with diff. rainfall pattern",
subtitle = "By players with a variation on underground water recharge")
ggsave(filename = "../img/capital_water_players_pluie_boxplot.png", width = 11)
real_gameSession <- read.csv("../data/gameSession_config_pluie_26.csv")
View(real_gameSession)
real_gameSession <- read.csv("../data/gameSession_config_pluie_26.csv", sep = ";", encoding="latin1")
View(real_gameSession)
View(real_gameSession)
real_gameSession <- read.csv("../data/gameSession_config_pluie_26.csv", sep = ";", encoding="latin1", header = F)
real_gameSession <- real_gameSession[,1:5]
View(real_gameSession)
names(real_gameSession) <- c("Joueurs",	"Lieu",	"ID", "partie",	"Consommation_eau",	'Capital_final')
real_gameSession <- read.csv("../data/gameSession_config_pluie_26.csv", sep = ";", encoding="latin1", header = F)
real_gameSession <- real_gameSession[,1:6]
names(real_gameSession) <- c("Joueurs",	"Lieu",	"ID", "partie",	"Consommation_eau",	'Capital_final')
View(real_gameSession)
ggplot()+
geom_point(aes(data = df.meltd, x = capital, y = prelevement), size = 0.5)+
geom_point(aes(data = real_gameSession, x = Capital_final, y = Consommation_eau, colour = as.factor(partie)), size = 0.5)+
# geom_hline(yintercept=0.75, linetype="dashed", color = "grey")+
# geom_vline(xintercept=0.75, linetype="dashed", color = "grey")+
theme_bw()+
labs(x = "final capital", y= "water withdrawal",
title = "300 replication with diff. rainfall pattern",
subtitle = "By players with a variation on underground water recharge")+
xlim(c(0,150))+
ylim(c(0,150))
ggplot()+
geom_point(data = df.meltd, aes( x = capital, y = prelevement), size = 0.5)+
geom_point(data = real_gameSession, aes( x = Capital_final, y = Consommation_eau, colour = as.factor(partie)), size = 0.5)+
# geom_hline(yintercept=0.75, linetype="dashed", color = "grey")+
# geom_vline(xintercept=0.75, linetype="dashed", color = "grey")+
theme_bw()+
labs(x = "final capital", y= "water withdrawal",
title = "300 replication with diff. rainfall pattern",
subtitle = "By players with a variation on underground water recharge")+
xlim(c(0,150))+
ylim(c(0,150))
ggplot()+
geom_point(data = df.meltd, aes( x = capital, y = prelevement), size = 0.5, alpha = 0.5)+
geom_point(data = real_gameSession, aes( x = Capital_final, y = Consommation_eau, colour = as.factor(partie)), size = 0.5)+
# geom_hline(yintercept=0.75, linetype="dashed", color = "grey")+
# geom_vline(xintercept=0.75, linetype="dashed", color = "grey")+
theme_bw()+
labs(x = "final capital", y= "water withdrawal",
title = "300 replication with diff. rainfall pattern",
subtitle = "By players with a variation on underground water recharge")+
xlim(c(0,150))+
ylim(c(0,150))
ggplot()+
geom_point(data = df.meltd, aes( x = capital, y = prelevement), size = 0.5, alpha = 0.5)+
geom_point(data = real_gameSession, aes( x = Capital_final, y = Consommation_eau), colour = "#1f78b4" size = 1)+
ggplot()+
geom_point(data = df.meltd, aes( x = capital, y = prelevement), size = 0.5, alpha = 0.5)+
geom_point(data = real_gameSession, aes( x = Capital_final, y = Consommation_eau), colour = "#1f78b4", size = 1)+
# geom_hline(yintercept=0.75, linetype="dashed", color = "grey")+
# geom_vline(xintercept=0.75, linetype="dashed", color = "grey")+
theme_bw()+
labs(x = "final capital", y= "water withdrawal",
title = "300 replication with diff. rainfall pattern",
subtitle = "By players with a variation on underground water recharge")+
xlim(c(0,150))+
ylim(c(0,150))
ggplot()+
geom_point(data = df.meltd, aes( x = capital, y = prelevement), size = 0.5, alpha = 0.4)+
geom_point(data = real_gameSession, aes( x = Capital_final, y = Consommation_eau), colour = "#e41a1c", size = 2)+
# geom_hline(yintercept=0.75, linetype="dashed", color = "grey")+
# geom_vline(xintercept=0.75, linetype="dashed", color = "grey")+
theme_bw()+
labs(x = "final capital", y= "water withdrawal",
title = "300 replication with diff. rainfall pattern",
subtitle = "By players with a variation on underground water recharge")+
xlim(c(0,150))+
ylim(c(0,150))
ggsave(filename = "../img/capital_water_players_pluie_realSession.png", width = 11)
ggplot()+
geom_point(data = df.meltd, aes( x = capital, y = prelevement), size = 0.5, alpha = 0.4)+
geom_point(data = real_gameSession, aes( x = Capital_final, y = Consommation_eau, colour = partie), size = 2)+
# geom_hline(yintercept=0.75, linetype="dashed", color = "grey")+
# geom_vline(xintercept=0.75, linetype="dashed", color = "grey")+
theme_bw()+
labs(x = "final capital", y= "water withdrawal",
title = "300 replication with diff. rainfall pattern",
subtitle = "By players with a variation on underground water recharge\n")+
xlim(c(0,150))+
ylim(c(0,150))
ggplot()+
geom_point(data = df.meltd, aes( x = capital, y = prelevement), size = 0.5, alpha = 0.4)+
geom_point(data = real_gameSession, aes( x = Capital_final, y = Consommation_eau, colour = as.factor(partie)), size = 2)+
# geom_hline(yintercept=0.75, linetype="dashed", color = "grey")+
# geom_vline(xintercept=0.75, linetype="dashed", color = "grey")+
theme_bw()+
labs(x = "final capital", y= "water withdrawal",
title = "300 replication with diff. rainfall pattern",
subtitle = "By players with a variation on underground water recharge\n")+
xlim(c(0,150))+
ylim(c(0,150))
real_gameSession <- read.csv("../data/gameSession_config_pluie_26.csv", sep = ";", encoding="latin1", header = F)
View(real_gameSession)
View(real_gameSession)
real_gameSession <- read.csv("../data/gameSession_config_pluie_26.csv", sep = ";", encoding="latin1")
View(real_gameSession)
ggplot()+
geom_point(data = df.meltd, aes( x = capital, y = prelevement), size = 0.5, alpha = 0.4)+
geom_point(data = real_gameSession, aes( x = Capital_final, y = Consommation_eau, colour = as.factor(ID.partie)), size = 2)+
# geom_hline(yintercept=0.75, linetype="dashed", color = "grey")+
# geom_vline(xintercept=0.75, linetype="dashed", color = "grey")+
theme_bw()+
labs(x = "final capital", y= "water withdrawal",
title = "300 replication with diff. rainfall pattern",
subtitle = "By players with a variation on underground water recharge\n")+
xlim(c(0,150))+
ylim(c(0,150))
ggsave(filename = "../img/capital_water_players_pluie_realSession.png", width = 11)
View(real_gameSession)
rm(list = ls())
library(jsonlite)
library(reshape2)
library(ggplot2)
library(DescTools)
i=1
file.l <- c("../data/result_pluies20-6.json", "../data/result_pluies6-20.json", "../data/result_pluies0-26.json")
data <- fromJSON(file.l[i])
dim(data$data$variables$result[[1]])
## organisation des données par PARTIES ####
# Étape 1 : Extraction des données
results <- data$data$variables$result
View(results)
results
as.data.frame(results[[1]][,,2])
dim(results)
dim(results[[1]])
